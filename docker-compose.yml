services:
  postgres:
    image: postgres:16
    container_name: gc_postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: testuser
      POSTGRES_PASSWORD: testpass
      POSTGRES_DB: testdb
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U testuser -d testdb"]
      interval: 5s
      timeout: 5s
      retries: 5
    command: >
      bash -c "
        docker-entrypoint.sh postgres &
        pid=$!;
        # Wait for PostgreSQL to accept connections
        for i in {1..30}; do
          pg_isready -U testuser -d postgres && break;
          sleep 1;
        done;
        # Create the 'testuser' database if it doesn't exist
        psql -U testuser -d postgres -c 'CREATE DATABASE testuser;' || true;
        wait $pid
      "

  garbagetruck:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: gc_sidecar
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      GC_SERVER_HOST: 0.0.0.0
      GC_SERVER_PORT: 50051
      GC_STORAGE_BACKEND: postgres
      DATABASE_URL: postgres://testuser:testpass@postgres:5432/testdb
      GC_MAX_DB_CONNECTIONS: 10
      # Add any other environment variables here as needed
    ports:
      - "50051:50051"
    volumes:
      - ./migrations:/app/migrations  # Assuming migrations are needed at runtime

  prometheus:
    image: prom/prometheus:latest
    container_name: gc_prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    depends_on:
      - garbagetruck

  grafana:
    image: grafana/grafana:latest
    container_name: gc_grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana-data:/var/lib/grafana

volumes:
  pgdata:
  grafana-data: