RUST_LOG=debug ./target/release/gc-sidecar


base) ronantakizawa@temps-MacBook-Pro-6 garbagecollector % # Make sure the service is running first
RUST_LOG=distributed_gc_sidecar=info ./target/release/gc-sidecar &

# Wait a moment for it to start
sleep 2

# Run the test
./simple_test.sh
zsh: command not found: #
[1] 87799
zsh: command not found: #
[1]  + done       RUST_LOG=distributed_gc_sidecar=info ./target/release/gc-sidecar
zsh: command not found: #
ðŸ§ª Simple GC Sidecar Test
=========================
Checking grpcurl...
âœ… grpcurl found
Checking proto file...
âœ… proto file found
Checking service...
Testing gRPC health check directly...
âœ… Service is running and responding
Health response: {
  "healthy": true,
  "version": "0.1.0",
  "uptime": "1970-01-01T00:00:44Z"
}
Testing health check...
âœ… Health check passed
Response: {
  "healthy": true,
  "version": "0.1.0",
  "uptime": "1970-01-01T00:00:44Z"
}
Testing lease creation...
âœ… Lease creation passed
Response: {
  "leaseId": "60fdcd39-fbc4-4182-b5bd-1f6b2795c5f5",
  "expiresAt": "2025-05-28T14:02:59.599435Z",
  "success": true
}

ðŸŽ‰ All basic tests passed!
Your GC Sidecar is working correctly!

(base) ronantakizawa@temps-MacBook-Pro-6 garbagecollector % # Health check
grpcurl -plaintext -import-path proto -proto gc_service.proto localhost:50051 distributed_gc.DistributedGCService/HealthCheck

# Create a lease
grpcurl -plaintext -import-path proto -proto gc_service.proto -d '{
  "object_id": "session-12345",
  "object_type": "WEBSOCKET_SESSION",
  "service_id": "web-service",
  "lease_duration_seconds": 60,
  "metadata": {"user_id": "user123"}
}' localhost:50051 distributed_gc.DistributedGCService/CreateLease
zsh: command not found: #
{
  "healthy": true,
  "version": "0.1.0",
  "uptime": "1970-01-01T00:00:29Z"
}
zsh: command not found: #
{
  "leaseId": "742c1f4e-5d20-4aa5-a528-fb68a364843a",
  "expiresAt": "2025-05-28T13:47:19.842324Z",
  "success": true
}
(base) ronantakizawa@temps-MacBook-Pro-6 garbagecollector % 
(base) ronantakizawa@temps-MacBook-Pro-6 garbagecollector % grpcurl -plaintext -import-path proto -proto gc_service.proto -d '{
  "lease_id": "742c1f4e-5d20-4aa5-a528-fb68a364843a"
}' localhost:50051 distributed_gc.DistributedGCService/GetLease
{
  "lease": {
    "leaseId": "742c1f4e-5d20-4aa5-a528-fb68a364843a",
    "objectId": "session-12345",
    "objectType": "WEBSOCKET_SESSION",
    "serviceId": "web-service",
    "createdAt": "2025-05-28T13:46:19.842324Z",
    "expiresAt": "2025-05-28T13:47:19.842324Z",
    "lastRenewedAt": "2025-05-28T13:46:19.842324Z",
    "metadata": {
      "user_id": "user123"
    }
  },
  "found": true
}
(base) ronantakizawa@temps-MacBook-Pro-6 garbagecollector % grpcurl -plaintext -import-path proto -proto gc_service.proto -d '{
  "lease_id": "742c1f4e-5d20-4aa5-a528-fb68a364843a",
  "service_id": "web-service",
  "extend_duration_seconds": 120
}' localhost:50051 distributed_gc.DistributedGCService/RenewLease
{
  "errorMessage": "Lease already expired: 742c1f4e-5d20-4aa5-a528-fb68a364843a"
}
(base) ronantakizawa@temps-MacBook-Pro-6 garbagecollector % grpcurl -plaintext -import-path proto -proto gc_service.proto -d '{"limit": 10}' localhost:50051 distributed_gc.DistributedGCService/ListLeases
{
  "leases": [
    {
      "leaseId": "742c1f4e-5d20-4aa5-a528-fb68a364843a",
      "objectId": "session-12345",
      "objectType": "WEBSOCKET_SESSION",
      "serviceId": "web-service",
      "createdAt": "2025-05-28T13:46:19.842324Z",
      "expiresAt": "2025-05-28T13:47:19.842324Z",
      "lastRenewedAt": "2025-05-28T13:46:19.842324Z",
      "metadata": {
        "user_id": "user123"
      }
    }
  ]
}
(base) ronantakizawa@temps-MacBook-Pro-6 garbagecollector % grpcurl -plaintext -import-path proto -proto gc_service.proto localhost:50051 distributed_gc.DistributedGCService/GetMetrics
{
  "totalLeasesCreated": "1",
  "leasesByService": {
    "web-service": "1"
  },
  "leasesByType": {
    "WebsocketSession": "1"
  }
}
(base) ronantakizawa@temps-MacBook-Pro-6 garbagecollector % # Create a lease with cleanup configuration
grpcurl -plaintext -import-path proto -proto gc_service.proto -d '{
  "object_id": "temp-file-456",
  "object_type": "TEMPORARY_FILE",
  "service_id": "file-service",
  "lease_duration_seconds": 30,
  "cleanup_config": {
    "cleanup_http_endpoint": "http://localhost:8080/cleanup",
    "max_retries": 2,
    "retry_delay_seconds": 3
  }
}' localhost:50051 distributed_gc.DistributedGCService/CreateLease
zsh: command not found: #
{
  "leaseId": "e953a729-2011-4ca7-b173-540009dbe93a",
  "expiresAt": "2025-05-28T13:48:49.418071Z",
  "success": true
}
(base) ronantakizawa@temps-MacBook-Pro-6 garbagecollector % python3 -c "
from http.server import HTTPServer, BaseHTTPRequestHandler
import json

class CleanupHandler(BaseHTTPRequestHandler):
    def do_POST(self):
        content_length = int(self.headers['Content-Length'])
        post_data = self.rfile.read(content_length)
        cleanup_request = json.loads(post_data)

        print(f'<0001f9f9> Cleanup request received: {cleanup_request}')

        self.send_response(200)
        self.send_header('Content-type', 'application/json')
        self.end_headers()
        self.wfile.write(json.dumps({'success': True}).encode())

httpd = HTTPServer(('localhost', 8080), CleanupHandler)
print('ðŸš€ Cleanup server running on port 8080...')
httpd.serve_forever()
"
ðŸš€ Cleanup server running on port 8080...
^CTraceback (most recent call last):
  File "<string>", line 20, in <module>
  File "/Applications/Xcode-beta.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/socketserver.py", line 232, in serve_forever
    ready = selector.select(poll_interval)
  File "/Applications/Xcode-beta.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/selectors.py", line 416, in select
    fd_event_list = self._selector.poll(timeout)
KeyboardInterrupt
